name: Baphomet Server Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      # - name: Set Environment Variables
      #   shell: powershell
      #   run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command
      #   ./set-env-variables.ps1" -Verb RunAs
      
      - name: Set Environment Variables
        shell: powershell
        run: |
          Write-Output "Setting environment variables..."
          $envContent = @"
          ATLAS_DB_PASSWORD=${{ secrets.ATLAS_DB_PASSWORD }}
          ATLAS_DB_USERNAME=${{ secrets.ATLAS_DB_USERNAME }}
          ATLAS_CLUSTER=${{ secrets.ATLAS_CLUSTER }}
          ATLAS_DB=${{ secrets.ATLAS_DB }}
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
          SSL_CERT=${{ secrets.SSL_CERT }}
          SSL_PRIVATE_KEY=${{ secrets.SSL_PRIVATE_KEY }}
          SSL_CERT_INTERMEDIATE=${{ secrets.SSL_CERT_INTERMEDIATE }}
          "@
          $envContent | Out-File -FilePath ".env"
          Write-Output "Environment variables set."



      - name: Verify Environment Variables
        shell: powershell
        run: cat .env

      - name: Install Docker Compose (if needed)
        shell: powershell
        run: |
          if (-not (Get-Command docker-compose -ErrorAction SilentlyContinue)) {
            $installPath = "${{ runner.temp }}/docker-compose.exe"
            Invoke-WebRequest -Uri "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Windows-x86_64.exe" -OutFile $installPath
            Start-Process -FilePath "powershell.exe" -ArgumentList "-Command
            Move-Item -Path $installPath -Destination 'C:\Program Files\Docker\Docker\resources\bin\docker-compose.exe'" -Verb RunAs
            Write-Output "Docker Compose Installed"
          } else {
            Write-Output "Docker Compose already installed"
          }

      - name: Docker Login
        run: |
          echo "-u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}" --password-stdin
          docker info | Select-String 'Username: ${{ secrets.DOCKER_USERNAME }}'

      - name: Verify Docker Hub Login
        shell: powershell
        run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command ./verify-docker-login.ps1" -Verb RunAs

      - name: Build Docker Images with Elevated Privileges
        shell: powershell
        run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command ./build-docker-image.ps1"

      - name: Tag Docker Image with Elevated Privileges
        shell: powershell
        run: |
          Start-Process -FilePath "docker" -ArgumentList "tag baphomet-server:latest collinlucke/baphomet-server:latest" -Verb RunAs

      # - name: Push Docker Images with Elevated Privileges
      #   shell: powershell
      #   run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command docker-compose -f docker-compose.yml push --verbose" -Verb RunAs
      
      - name: Push Docker Images with Logging
        shell: powershell
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command docker-compose -f docker-compose.yml push" -Verb RunAs -Wait -PassThru | ForEach-Object {
            $_.StandardOutput.ReadToEnd()
            $_.StandardError.ReadToEnd()
          }
          if ($LASTEXITCODE -ne 0) {
            Write-Output "Docker push failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          } else {
            Write-Output "Docker push completed successfully."
          }


  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Docker Compose (if needed)
        shell: powershell
        run: |
          if (-not (Get-Command docker-compose -ErrorAction SilentlyContinue)) {
            $installPath = "${{ runner.temp }}/docker-compose.exe"
            Invoke-WebRequest -Uri "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Windows-x86_64.exe" -OutFile $installPath
            Start-Process -FilePath "powershell.exe" -ArgumentList "-Command
            Move-Item -Path $installPath -Destination 'C:\Program Files\Docker\Docker\resources\bin\docker-compose.exe'" -Verb RunAs
            Write-Output "Docker Compose Installed"
          } else {
            Write-Output "Docker Compose already installed"
          }

      - name: Pull Image from Docker Hub
        run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command docker-compose -f docker-compose.yml pull --verbose" -Verb RunAs

      - name: Delete Old Container
        run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command docker-compose -f docker-compose.yml rm" -Verb RunAs
        

      - name: Run Docker Container
        run: Start-Process -FilePath "powershell.exe" -ArgumentList "-Command docker-compose -f docker-compose.yml up -d" -Verb RunAs
